<?php

// Custom search path alias
function sutunam_form_search_form_alter(&$form, &$form_state, $form_id) {
    $form['#action'] = 'searchpath';
    $form_state['action'] = 'searchpath';
    $form['#submit'][] = '_sutunam_search_form_submit';
}

function sutunam_form_search_block_form_alter(&$form, &$form_state, $form_id) {
    $form['#submit'][] = '_sutunam_search_form_submit';
}

function _sutunam_search_form_submit(&$form, &$form_state) {
    $form_state['redirect'] = 'searchpath/'.$form_state['values']['search_block_form'];
}

// Add searchpath to available paths
function sutunam_menu_alter(&$items) {
    $path = 'searchpath';
    $items[$path] = array(
        'title' => t('Search'),
        'page callback' => 'search_view',
        'page arguments' => array('SEARCH_MODULE', 1),
        'access callback' => '_search_menu_access',
        'access arguments' => array('SEARCH_MODULE'),
        'type' => MENU_LOCAL_TASK,
        'file' => drupal_get_path('module', 'search') . '/search.pages.inc',
        'weight' => -10, //Don't know what is it for
    );
    $items["$path/%menu_tail"] = array(
        'title' => t('Search'),
        'load arguments' => array('%map', '%index'),
        'page callback' => 'search_view',
        'page arguments' => array('SEARCH_MODULE', 1),
        'access callback' => '_search_menu_access',
        'access arguments' => array('SEARCH_MODULE'),

        // The default local task points to its parent, but this item points to
        // where it should so it should not be changed.
        'type' => MENU_LOCAL_TASK,
        'file' => drupal_get_path('module', 'search') . '/search.pages.inc',
        'weight' => 0,

        // These tabs are not subtabs.
        'tab_root' => 'searchpath/%',

        // These tabs need to display at the same level.
        'tab_parent' => 'searchpath',
    );
}

/**
 * Implements hook_token_info().
 */
function sutunam_token_info() {
    $info = array();
    // Define a new token type.
    $info['types']['job'] = array(
        'name' => t('Job tokens'),
        'description' => t('Job tokens.'),
    );

    // Define any new tokens.
    $info['tokens']['job']['title'] = array(
        'name' => t('Job tile'),
        'description' => t('Job title'),
    );
    $info['tokens']['job']['body'] = array(
        'name' => t('Job body'),
        'description' => t('Job body'),
    );
    $info['tokens']['job']['location'] = array(
        'name' => t('Job location'),
        'description' => t('Job location'),
    );
    $info['tokens']['job']['type'] = array(
        'name' => t('Job type'),
        'description' => t('Job type'),
    );
    $info['tokens']['job']['place'] = array(
        'name' => t('Job place'),
        'description' => t('Job place'),
    );
    $info['tokens']['job']['public_date'] = array(
        'name' => t('Job public_date'),
        'description' => t('Job public_date'),
    );
    $info['tokens']['job']['url'] = array(
        'name' => t('Job url'),
        'description' => t('Job url'),
    );
    return $info;
}

/**
 * Implements hook_tokens().
 */
function sutunam_tokens($type, $tokens, array $data = array(), array $options = array()) {
    $replacements = array();

    if ($type == 'job') {
        if(isset($data['node']) AND $data['node']->nid==34){
            $lang=$GLOBALS['language']->language;
            $job=node_load($data['webform-submission']->data[6][0]);
            // Loop through the available tokens.
            foreach ($tokens as $name => $original) {
                // Find our custom tokens by name.
                switch ($name) {
                    case 'title':
                        // Work out the value of our token.
                        $value = $job->title;
                        // Give our token it's value!
                        $replacements[$original] = $value;
                        break;
                    case 'body':
                        // Work out the value of our token.
                        $value =array_shift($job->body)[0]['value'];
                        // Give our token it's value!
                        $replacements[$original] = $value;
                        break;
                    case 'location':
                        // Work out the value of our token.
                        $value = array_shift($job->field_location)[0]['value'];
                        // Give our token it's value!
                        $replacements[$original] = $value;
                        break;
                    case 'type':
                        // Work out the value of our token.
                        $value = array_shift($job->field_type)[0]['value'];
                        // Give our token it's value!
                        $replacements[$original] = $value;
                        break;
                    case 'place':
                        // Work out the value of our token.
                        $value = array_shift($job->field_place)[0]['value'];
                        // Give our token it's value!
                        $replacements[$original] = $value;
                        break;
                    case 'public_date':
                        // Work out the value of our token.
                        $value = date('d/m/Y',$job->changed);
                        // Give our token it's value!
                        $replacements[$original] = $value;
                        break;
                    case 'url':
                        // Work out the value of our token.
                        $value = url('node/'.$job->nid);
                        // Give our token it's value!
                        $replacements[$original] = $value;
                        break;
                }
            }
        }

    }

    return $replacements;
}



